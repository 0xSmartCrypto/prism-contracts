{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base_distribution_schedule",
    "boost_contract",
    "boost_distribution_schedule",
    "gov",
    "min_bond_amount",
    "operator",
    "owner",
    "prism_token",
    "vesting_period",
    "xprism_token",
    "yluna_staking",
    "yluna_token"
  ],
  "properties": {
    "base_distribution_schedule": {
      "type": "array",
      "items": [
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        {
          "$ref": "#/definitions/Uint128"
        }
      ],
      "maxItems": 3,
      "minItems": 3
    },
    "boost_contract": {
      "type": "string"
    },
    "boost_distribution_schedule": {
      "type": "array",
      "items": [
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        {
          "$ref": "#/definitions/Uint128"
        }
      ],
      "maxItems": 3,
      "minItems": 3
    },
    "gov": {
      "type": "string"
    },
    "min_bond_amount": {
      "$ref": "#/definitions/Uint128"
    },
    "operator": {
      "type": "string"
    },
    "owner": {
      "type": "string"
    },
    "prism_token": {
      "type": "string"
    },
    "vesting_period": {
      "description": "vesting period in seconds",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "xprism_token": {
      "type": "string"
    },
    "yluna_staking": {
      "type": "string"
    },
    "yluna_token": {
      "type": "string"
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
