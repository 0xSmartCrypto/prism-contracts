{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "User operations /// Unbond yLUNA",
      "type": "object",
      "required": [
        "unbond"
      ],
      "properties": {
        "unbond": {
          "type": "object",
          "properties": {
            "amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the user's boost weight based on the current boost amount",
      "type": "object",
      "required": [
        "activate_boost"
      ],
      "properties": {
        "activate_boost": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Refreshes boost value for a specific user. Meant to be called by the Boost contract when somebody's AMPS go to 0.",
      "type": "object",
      "required": [
        "privileged_refresh_boost"
      ],
      "properties": {
        "privileged_refresh_boost": {
          "type": "object",
          "required": [
            "account"
          ],
          "properties": {
            "account": {
              "description": "Address of account.",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw $PRISM rewards Starts 30 day vesting period",
      "type": "object",
      "required": [
        "withdraw_rewards"
      ],
      "properties": {
        "withdraw_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Start vesting period for many accounts in a single call. See documentation for the `withdraw_rewards_bulk` function for details.",
      "type": "object",
      "required": [
        "withdraw_rewards_bulk"
      ],
      "properties": {
        "withdraw_rewards_bulk": {
          "type": "object",
          "required": [
            "limit"
          ],
          "properties": {
            "limit": {
              "description": "Process up to `limit` accounts in this call. Can be tweaked to process more or less users depending on gas fees.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_after_address": {
              "description": "Only consider accounts whose address is strictly larger than this field.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim rewards that have been previously withdrawn via WithdrawRewards or WithdrawRewardsBulk.  Only vested rewards are available to be withdrawn here.  The claim_type parameter specifies how the user would like to receive those rewards.",
      "type": "object",
      "required": [
        "claim_withdrawn_rewards"
      ],
      "properties": {
        "claim_withdrawn_rewards": {
          "type": "object",
          "required": [
            "claim_type"
          ],
          "properties": {
            "claim_type": {
              "$ref": "#/definitions/ClaimType"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw underlying rewards from yLUNA staking contract",
      "type": "object",
      "required": [
        "admin_withdraw_rewards"
      ],
      "properties": {
        "admin_withdraw_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Helper for AdminWithdrawRewards",
      "type": "object",
      "required": [
        "admin_send_withdrawn_rewards"
      ],
      "properties": {
        "admin_send_withdrawn_rewards": {
          "type": "object",
          "required": [
            "original_balances"
          ],
          "properties": {
            "original_balances": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetBase_for_Addr"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows admin to update contract's config.",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "min_bond_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Hook to bond xprism with the boost contract.  This hook is invoked when a user calls ClaimWithdrawnRewards with ClaimType=Amps.",
      "type": "object",
      "required": [
        "bond_with_boost_contract_hook"
      ],
      "properties": {
        "bond_with_boost_contract_hook": {
          "type": "object",
          "required": [
            "prev_xprism_balance",
            "receiver"
          ],
          "properties": {
            "prev_xprism_balance": {
              "$ref": "#/definitions/Uint128"
            },
            "receiver": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetBase_for_Addr": {
      "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: [`info`], which specifies the asset's type (CW20 or native), and its [`amount`], which specifies the asset's amount",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Specifies the asset's amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Specifies the asset's type (CW20 or native)",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfoBase_for_Addr"
            }
          ]
        }
      }
    },
    "AssetInfoBase_for_Addr": {
      "description": "Represents the type of an fungible asset\n\nEach **asset info** instance can be one of two variants:\n\n- CW20 tokens. To create an **asset info** instance of this type, provide the contract address. - Native SDK coins. To create an **asset info** instance of this type, provide the denomination.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "ClaimType": {
      "type": "string",
      "enum": [
        "Prism",
        "Xprism",
        "Amps"
      ]
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
