{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "type": "object",
  "required": [
    "base_denom",
    "owner",
    "token",
    "withdraw_fee",
    "withdraw_threshold"
  ],
  "properties": {
    "base_denom": {
      "type": "string"
    },
    "launch_config": {
      "anyOf": [
        {
          "$ref": "#/definitions/LaunchConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "owner": {
      "type": "string"
    },
    "token": {
      "type": "string"
    },
    "withdraw_fee": {
      "$ref": "#/definitions/Decimal"
    },
    "withdraw_threshold": {
      "$ref": "#/definitions/Uint128"
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "LaunchConfig": {
      "type": "object",
      "required": [
        "amount",
        "phase1_start",
        "phase2_end",
        "phase2_start"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "phase1_start": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "phase2_end": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "phase2_start": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
